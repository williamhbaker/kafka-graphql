version: '3.6'
services:
  kafka:
    image: 'bitnami/kafka:3.3'
    container_name: 'kafka'
    restart: always
    ports:
      - '9092:9092'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # The host needs to be accessible to Estuary Flow to capture data from Kafka.
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_HOST}:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes

  postgres:
    image: postgres:15
    container_name: 'postgres'
    restart: always
    ports:
      # This port needs to be accessible to Estuary Flow to materialize data into the database.
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    command: [ "postgres", "-c", "wal_level=logical" ]

  # Hasura GraphQL engine
  hasura:
    image: hasura/graphql-engine:v2.13.0
    container_name: 'hasura'
    restart: always
    ports:
      - "8080:8080"
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: ${DATABASE_CONNECTION_STRING}
      PG_DATABASE_URL: ${DATABASE_CONNECTION_STRING}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"

  # Sample data generator
  data_gen:
    build:
      context: ./data_gen
    container_name: 'data_gen'
    restart: always
    depends_on:
      - kafka
    command: [ "/dist/main" ]
